<?php

namespace app\controllers;

use Yii;
use app\models\Bp24h;
use app\models\Bp24hSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
 use yii\data\ArrayDataProvider;
 use yii\filters\AccessControl;
use yii\db\Expression;


/**
 * Bp24hController implements the CRUD actions for Bp24h model.
 */
class Bp24hController extends Controller
{
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['update', 'create','index','RegisterBPMeasurements',],
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all Bp24h models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new Bp24hSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Bp24h model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Bp24h model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate($pid)
    {
        $model = Bp24h::findOne(['fk_person'=>$pid]);
        if(empty($model)){
           $bp24 = new Bp24h();
           $bp24->fk_person = $pid;
           if($bp24->save(FALSE)){
               return $this->redirect(['bp24h/create', 'pid'=>$pid]);
           }
        }else{
            return $this->redirect(["bp24h/update/$model->idbp24"]);
        }
        
       
    }

    /**
     * Updates an existing Bp24h model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        
        $bp24= new Bp24h;
        $_24hdata= $bp24->pull24hoursdata($id);
        
        $pid=$model->fk_person;
        $persondetails=  \app\models\Participant::findOne(['pk_person'=>$pid]);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->idbp24]);
        } else {
            return $this->render('update', [
                'model' => $model,
                //'searchModel' => $searchModel,
                'dataProvider' => $_24hdata,
                'persondetails' => $persondetails,
            ]);
        }
        
        }
        
        public function actionRegisterBPMeasurements($fkperson,$fkstudyno){
            echo "I am here";exit;
             $modelcheck = Bp24h::findone(['fk_person'=>$fkperson]);
            if(!$modelcheck){
              $bpmodel=new Bp24h;
              $bpmodel->fk_person=$fkperson;
              $bpmodel->fk_study_no=$fkstudyno;
              if($bpmodel->save(false)){
                 $modelcheck = Bp24h::findone(['fk_person'=>$fkperson]);  
              }
            }
            $id=$modelcheck->idbp24;
        $model = $this->findModel($id);
        
        $bp24= new Bp24h;
        $_24hdata= $bp24->pull24hoursdata($id);
        
        $pid=$model->fk_person;
        $patmodel=  \app\models\Participant::find([]);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->idbp24]);
        } else {
            return $this->render('update', [
                'model' => $model,
                //'searchModel' => $searchModel,
                'dataProvider' => $_24hdata,
            ]);
        }
        }
    

    /**
     * Deletes an existing Bp24h model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Bp24h model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Bp24h the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Bp24h::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
    
    
        /**
         * function to upload specimens from an excel file
         */
        public function actionUploadSpecimen(){
            if(isset($_FILES['upload_Artierograph']))
            {   
                $uploadfile = CUploadedFile::getInstanceByName('upload_Artierograph');
                $date_received = $_POST['Specimen']['date_received'];
                $lab_tech = $_POST['lab_tech'];
                $basepath = "uploads/";
                
                $speccount = Specimen::model()->findByAttributes(array('batch_file' => $uploadfile)); // check whether the batch had been uploaded before
                if(!$speccount){
                    if($uploadfile !== null)
                    {
                        // $columnarray = $specimenextract->getTableColumn($activetable);
                        if($uploadfile->saveAs($basepath.$uploadfile -> name,False)){
                            Yii::import('application.vendors.phpexcel',true);
                       //     PHPExcel_Cell::setValueBinder( new PHPExcel_Cell_AdvancedValueBinder() );
                            $objReader = new PHPExcel_Reader_Excel5;
                            $objPHPExcel = $objReader->load($basepath.$uploadfile -> name);
                            $objWorksheet = $objPHPExcel->getActiveSheet();
                            $highestRow = $objWorksheet->getHighestRow(); // e.g. 10
                            $highestColumn = $objWorksheet->getHighestColumn(); // e.g 'F'
                            $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn); // e.g. 5
                           // $objWorksheet->setCellValue('D2','Date/time');
                           //  var_dump(date('Y-m-d',  $this->exceltotimestamp($objWorksheet->getCellByColumnAndRow(3, 2)->getValue())));
                           //    exit;
                          $slots = StoragePosition::model()->getAvailablePos("specimen");
                          $noofspec = $highestRow-1;
                            
                            if(trim($objWorksheet->getCellByColumnAndRow(0, 1)->getValue()) == 'No.' && trim($objWorksheet->getCellByColumnAndRow(1, 1)->getValue()) == 'Globally Unique Aliquot ID' && trim($objWorksheet->getCellByColumnAndRow(2, 1)->getValue()) == 'Globally Unique Sample ID' && trim($objWorksheet->getCellByColumnAndRow(3, 1)->getValue()) == 'aliquot number'  && trim($objWorksheet->getCellByColumnAndRow(4, 1)->getValue()) == 'Visit #' && trim($objWorksheet->getCellByColumnAndRow(5, 1)->getValue()) == 'Swaber ID' && trim($objWorksheet->getCellByColumnAndRow(6, 1)->getValue()) == 'Date Collected'  && trim($objWorksheet->getCellByColumnAndRow(7, 1)->getValue()) == 'Aliquot Volume'){
                                if($slots >= $noofspec){
                                    for ($row = 2; $row <= $highestRow; ++$row){
                                        $model = new Specimen;
                                        //for($col = 0; $col <= $highestColumnIndex; ++$col) {                                          
                                            //$model -> $columnarray[$col]['COLUMN_NAME'] = $objWorksheet->getCellByColumnAndRow($col, $row)->getValue();                                        
                                        //}
                                        $model -> global_id = $objWorksheet->getCellByColumnAndRow(1, $row)->getValue(); 
                                        $model -> study_id = str_replace('MUZ', "", $objWorksheet->getCellByColumnAndRow(2, $row)->getValue());                               
                                        $model -> aliquote = $objWorksheet->getCellByColumnAndRow(3, $row)->getValue(); 
                                        $model -> visit_no = $objWorksheet->getCellByColumnAndRow(4, $row)->getValue(); 
                                        $model -> fw_initials = $objWorksheet->getCellByColumnAndRow(5, $row)->getValue(); 
                                        $model -> date_collect = date('Y-m-d',  $this->exceltotimestamp($objWorksheet->getCellByColumnAndRow(6, $row)->getValue())); 

                                       // $model -> time_collect = date('H:i:s',  $this->exceltotimestamp($objWorksheet->getCellByColumnAndRow(4, $row)->getValue()));  

                                        $model -> volume = str_replace("µl", "", $objWorksheet->getCellByColumnAndRow(7, $row)->getValue());                               
                                        $model -> unit = 'µl'; 
                                        $model -> timestamp = date("Y-m-d H:i:s");
                                        $model-> volume_remaining = $model -> volume;
                                        $model-> lab_tech = $lab_tech;    
                                        $model-> logged_in_user = Yii::app()->user->name;                         
                                        $model-> date_received = $date_received; 
                                        $model-> batch_file = $uploadfile; 

                                        //constants -- Extendable(would turn to variables if another study is hooked in the system)
                                        $model-> unit = "µl";
                                        $model-> study_no = 59;
                                        $model-> specimen_type = "NPS";
                                        $model-> specimen_source = "Research Study";
                                        if($model->save(FALSE)){
                                            $this->storesample($model -> id);
                                        }
                                    }
                                }else{
                                    unlink($basepath.$uploadfile -> name);
                                    Yii::app()->user->setFlash('error', "There no enough slots to auto-store the specimens we have $slots slots but we have $noofspec samples");
                                    $this->redirect(array('specimen/admin','b' => 'A')); 
                                }
                            }else{
                                unlink($basepath.$uploadfile -> name);
                                Yii::app()->user->setFlash('error', "The excell file is not in the right format");
                                $this->redirect(array('specimen/admin','b' => 'A'));                                
                            }
                            unlink($basepath.$uploadfile -> name);
                            Yii::app()->user->setFlash('success', " results have been uploaded successfully.");
                            $this->redirect(array('specimen/admin','b' => 'A'));
                        }else{                        
                            Yii::app()->user->setFlash('error', "The file was not uploaded. Please contact system administrator.");
                            $this->redirect(array('specimen/admin','b' => 'A'));
                        }
                    }
                }else{                        
                    Yii::app()->user->setFlash('error', "The file seems to have been uploaded before. If not, contact Data manager.");
                    $this->redirect(array('specimen/admin','b' => 'A'));
                }
            }
        }
    
}
